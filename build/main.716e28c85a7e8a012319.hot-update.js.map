{"version":3,"file":"main.716e28c85a7e8a012319.hot-update.js","sources":["webpack:///./src/platform/services/connection.js"],"sourcesContent":["import * as nodeFetch from \"node-fetch\";\r\nimport ROUTES from \"../constants/routes\";\r\n\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { LanguageEnum } from \"../constants/enums\";\r\n\r\nclass Connection {\r\n  static BASE_URL = \"https://2.evollai.com/api\";\r\n\r\n  static queryFromObject = obj => {\r\n    const str = [];\r\n\r\n    for (const query in obj) {\r\n      if (obj.hasOwnProperty(query) && obj[query]) {\r\n        const string =\r\n          encodeURIComponent(query) + \"=\" + encodeURIComponent(obj[query]);\r\n        str.push(string);\r\n      }\r\n    }\r\n\r\n    return str.join(\"&\");\r\n  };\r\n\r\n  static createHeaders = isUpload => {\r\n    let language = 1;\r\n    const HEADERS = new Headers();\r\n    const shortLanguage = localStorage.getItem(\"language\");\r\n    if (shortLanguage === \"hy\") language = LanguageEnum.hy;\r\n    else if (shortLanguage === \"ru\") language = LanguageEnum.ru;\r\n    else if (shortLanguage === \"en\") language = LanguageEnum.en;\r\n    !isUpload && HEADERS.append(\"Content-Type\", \"application/json\");\r\n    HEADERS.append(\"language\", language);\r\n    return HEADERS;\r\n  };\r\n\r\n  static responseRestructure = response => {\r\n    if (response.status === 401 || response.status === 403) {\r\n      window.routerHistory.push(ROUTES.HOME);\r\n      NotificationManager.error(\r\n        \"Something is wrong with permission or authentication\"\r\n      );\r\n    }\r\n\r\n    return response.ok ? response.json() : {};\r\n  };\r\n\r\n  static stringifyUrlEncoded = obj => {\r\n    let urlEncoded = \"\";\r\n    for (let key in obj) {\r\n      urlEncoded += `${encodeURIComponent(key)}=${encodeURIComponent(\r\n        obj[key]\r\n      )}&`;\r\n    }\r\n    return urlEncoded;\r\n  };\r\n\r\n  static POST = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body: JSON.stringify(body),\r\n        method: \"POST\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static PUT = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body: JSON.stringify(body),\r\n        method: \"PUT\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static DELETE = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static GET = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        method: \"GET\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static UPLOAD = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders(true);\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/api/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body,\r\n        method: \"POST\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static Custom = async ({ url, method, body, queryConfig }) => {\r\n    const response = await nodeFetch(\r\n      `${url}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body,\r\n        method\r\n      }\r\n    );\r\n\r\n    return response.ok ? response.json() : {};\r\n  };\r\n\r\n  static ServerRequest = async ({\r\n    method,\r\n    controllerName,\r\n    actionName,\r\n    body,\r\n    queryConfig\r\n  }) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/api/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body,\r\n        method\r\n      }\r\n    );\r\n\r\n    return response.ok ? response.json() : {};\r\n  };\r\n}\r\n\r\nexport default Connection;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AA5BA;AA8BA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAvCA;AAyCA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAjDA;;;;;AAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAWA;AACA;AACA;AAHA;AACA;AAXA;AAIA;AAaA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAnDA;;;;;AAuEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAWA;AACA;AACA;AAHA;AACA;AAXA;AAIA;AAaA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAxEA;;;;;AA4FA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAWA;AACA;AAFA;AACA;AAXA;AAIA;AAYA;AAhBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA7FA;;;;;AAgHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAWA;AACA;AAFA;AACA;AAXA;AAIA;AAYA;AAhBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAjHA;;;;;AAoIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAWA;AACA;AACA;AAHA;AACA;AAXA;AAIA;AAaA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AArIA;;;;;AAyJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA1JA;;;;;AAuKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAPA;AAAA;AAeA;AACA;AAFA;AACA;AAfA;AAQA;AARA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;;;;A","sourceRoot":""}