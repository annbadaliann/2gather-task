{"version":3,"file":"main.842d2acf7000faa505f8.hot-update.js","sources":["webpack:///./src/assets/images/2gather.jpg","webpack:///./src/pages/SignIn/index.jsx","webpack:///./src/platform/api/auth.js","webpack:///./src/platform/services/connection.js","webpack:///./src/platform/services/validator.js","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"node-fetch\"","webpack:///external \"react-notifications\""],"sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2gather.103d215b.jpg\";","import React, { useState, useEffect } from \"react\";\nimport logo from \"../../assets/images/2gather.jpg\";\nimport AuthController from \"../../platform/api/auth\";\nimport {\n  isValidEmail,\n  isValidPassword\n} from \"../../platform/services/validator\";\nimport {\n  OsTypeEnum,\n  LoginProviderTypeEnum\n} from \"../../platform/constants/enums\";\nimport \"./style.scss\";\n\nclass SignIn extends React.Component {\n  state = {\n    form: {\n      email: \"\",\n      password: \"\"\n    },\n    focus: {\n      email: false,\n      password: false\n    },\n    passToggle: false\n  };\n\n  focusHandler = key => {\n    const item = this.state.form;\n    this.setState({\n      [item]: true\n    });\n  };\n\n  blurHandler = key => {\n    this.setState({\n      [key]: false\n    });\n  };\n\n  togglePassword = () => {\n    this.setState({\n      passToggle: true\n    });\n  };\n\n  render() {\n    const { form, focus, passToggle } = this.state;\n    return (\n      <div className=\"sign-in\">\n        <div className=\"sign-in-form\">\n          <div className=\"sign-in-form-container\">\n            <h2>Sign in</h2>\n            <p>\n              Enter your email and password and login in your <br /> account\n            </p>\n            <form>\n              <div className=\"G-field\">\n                <label\n                  className={`G-form-label  ${\n                    focus.email ? \"G-label-animated\" : \"\"\n                  }`}\n                  htmlFor=\"signin-email\"\n                >\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  onFocus={() => focusHandler(\"email\")}\n                  onBlur={() => blurHandler(\"email\")}\n                />\n\n                <span\n                  className={`input-border ${\n                    focus.email ? \"input-border-animated\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div className=\"G-field\">\n                <label\n                  className={`G-form-label  ${\n                    focus.password ? \"G-label-animated\" : \"\"\n                  }`}\n                  htmlFor=\"signin-password\"\n                >\n                  Password\n                </label>\n                <input\n                  type={!passToggle ? \"password\" : \"text\"}\n                  onFocus={() => focusHandler(\"password\")}\n                  onBlur={() => blurHandler(\"password\")}\n                />\n\n                <span\n                  className={`input-border ${\n                    focus.password ? \"input-border-animated\" : \"\"\n                  }`}\n                ></span>\n                <i\n                  className={!passToggle ? \"icon-ic_eye\" : \"icon-ic_eyeclosed\"}\n                  onClick={this.togglePassword}\n                ></i>\n              </div>\n\n              <button className=\"G-button\">Sign in</button>\n            </form>\n          </div>\n        </div>\n        <div className=\"logo\">\n          <img src={logo} alt=\"2gather\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SignIn;\n","import Connection from '../services/connection';\r\n\r\nconst controllerName = 'auth';\r\n\r\nclass AuthController {\r\n\r\n  static Login = body => {\r\n    const result = Connection.POST(controllerName, 'login', body);\r\n    return result;\r\n  }\r\n\r\n  static Register = body => {\r\n    const result = Connection.POST(controllerName, 'register', body);\r\n    return result;\r\n  }\r\n\r\n  static Email = query => {\r\n    const result = Connection.POST(controllerName, 'email', query);\r\n    return result;\r\n  }\r\n\r\n  static RestoreEmail = query => {\r\n    const result = Connection.POST(controllerName, 'restore/email', query);\r\n    return result;\r\n  }\r\n\r\n  static Restore = query => {\r\n    const result = Connection.POST(controllerName, 'restore', query);\r\n    return result;\r\n  }\r\n\r\n  static SocialLogin = query => {\r\n    const result = Connection.POST(controllerName, 'socialLogin', query);\r\n    return result;\r\n  }\r\n\r\n \r\n\r\n  // static EmailVerify = query => {\r\n  //   const result = Connection.POST(controllerName, 'check', query);\r\n  //   return result;\r\n  // }\r\n\r\n  // static Logout = () => {\r\n  //   const result = Connection.GET(controllerName, 'Logout');\r\n  //   return result;\r\n  // }\r\n\r\n  // static PasswordRecovery = query => {\r\n  //   const result = Connection.GET(controllerName, 'PasswordRecoverySend', query);\r\n  //   return result;\r\n  // }\r\n\r\n  // static PasswordRecoveryConfirm = body => {\r\n  //   const result = Connection.POST(controllerName, 'PasswordRecoveryConfirm', body);\r\n  //   return result;\r\n  // }\r\n}\r\n\r\nexport default AuthController;","import * as nodeFetch from 'node-fetch';\r\nimport ROUTES from '../constants/routes';\r\n\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { LanguageEnum } from '../constants/enums';\r\n\r\nclass Connection {\r\n\r\n  static BASE_URL = 'https://2.evollai.com/api';\r\n  \r\n\r\n  static queryFromObject = obj => {\r\n    const str = [];\r\n\r\n    for (const query in obj) {\r\n      if (obj.hasOwnProperty(query) && obj[query]) {\r\n        const string = encodeURIComponent(query) + \"=\" + encodeURIComponent(obj[query]);\r\n        str.push(string);\r\n      }\r\n    }\r\n  \r\n    return str.join(\"&\");\r\n  }\r\n\r\n  static createHeaders = isUpload => {\r\n    let language = 1;\r\n    const HEADERS = new Headers();\r\n    const shortLanguage = localStorage.getItem('language');\r\n    if (shortLanguage === 'hy') language = LanguageEnum.hy;\r\n    else if (shortLanguage === 'ru') language = LanguageEnum.ru;\r\n    else if (shortLanguage === 'en') language = LanguageEnum.en;\r\n    !isUpload && HEADERS.append('Content-Type', 'application/json');\r\n    HEADERS.append('language', language);\r\n    return HEADERS;\r\n  }\r\n\r\n  static responseRestructure = response => {\r\n    if (response.status === 401 || response.status === 403) {\r\n      window.routerHistory.push(ROUTES.HOME);\r\n      NotificationManager.error('Something is wrong with permission or authentication');\r\n    };\r\n\r\n    return response.ok ? response.json() : {};\r\n  }\r\n\r\n  static stringifyUrlEncoded = obj => {\r\n    let urlEncoded = '';\r\n    for (let key in obj) {\r\n      urlEncoded += `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}&`;\r\n    }\r\n    return urlEncoded;\r\n  }\r\n\r\n  static POST = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body: JSON.stringify(body),\r\n      method: 'POST',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static PUT = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body: JSON.stringify(body),\r\n      method: 'PUT',\r\n      headers: HEADERS,\r\n    })\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static DELETE = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      method: 'DELETE',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static GET = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      method: 'GET',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static UPLOAD = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders(true);\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/api/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body,\r\n      method: 'POST',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static Custom = async ({ url, method, body, queryConfig }) => {\r\n    const response = await nodeFetch(`${url}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body,\r\n      method,\r\n    });\r\n\r\n    return response.ok ? response.json() : {};\r\n  }\r\n\r\n  static ServerRequest = async ({ method, controllerName, actionName, body, queryConfig }) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const response = await fetch(`${Connection.BASE_URL}/api/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body,\r\n      method,\r\n    });\r\n\r\n    return response.ok ? response.json() : {};\r\n  }\r\n}\r\n\r\nexport default Connection;","export const isValidEmail = value => {\r\n  if (!value && value !== '') return false;\r\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return regex.test(value);\r\n};\r\n\r\n\r\nexport const isValidPassword = value => {\r\n  if(!value && value !== \"\") return false;\r\n  const regex = /^.{6,}$/;\r\n  return regex.test(value);\r\n}\r\n\r\nexport const isValidPhoneNum = value => {\r\n  if(!value && value !== \"\") return false;\r\n  const regex = /\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/;\r\n  return regex.test(value);\r\n}","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"node-fetch\");","module.exports = require(\"react-notifications\");"],"mappings":"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","sourceRoot":""}