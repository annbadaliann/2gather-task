{"version":3,"file":"main.f879d703b555b480da48.hot-update.js","sources":["webpack:///./src/assets/images/2gather.jpg","webpack:///./src/pages/SignIn/index.jsx","webpack:///./src/platform/api/auth.js","webpack:///./src/platform/services/connection.js","webpack:///./src/platform/services/validator.js","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"node-fetch\"","webpack:///external \"react-notifications\""],"sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2gather.103d215b.jpg\";","import React, { useState, useEffect } from \"react\";\nimport logo from \"../../assets/images/2gather.jpg\";\nimport AuthController from \"../../platform/api/auth\";\nimport {\n  isValidEmail,\n  isValidPassword\n} from \"../../platform/services/validator\";\nimport {\n  OsTypeEnum,\n  LoginProviderTypeEnum\n} from \"../../platform/constants/enums\";\nimport \"./style.scss\";\n\nclass SignIn extends React.Component {\n  state = {\n    form: {\n      email: \"\",\n      password: \"\"\n    },\n    focus: {\n      email: false,\n      password: false\n    },\n    passToggle: false\n  };\n\n  //   focusHandler = key => {\n  //     this.setState(prevState => ({\n  //       ...prevState,\n  //       focus: {\n  //         [key]: !prevState.focus[key]\n  //       }\n  //     }));\n  //   };\n\n  //   blurHandler = key => {\n  //     if (this.state.form[key]) {\n  //       console.log(\"123123\");\n  //       this.setState(prevState => ({\n  //         ...prevState,\n  //         focus: {\n  //           [key]: !prevState.focus[key]\n  //         }\n  //       }));\n  //     }\n  //   };\n\n  submit = async () => {\n    const {\n      form: { email, password }\n    } = this.state;\n    if (email && password) {\n      const res = await fetch(\"https://2.evollai.com/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify({ email, passowrd, osType: 3 })\n      });\n    }\n  };\n\n  change = e => {\n    const { form } = this.state;\n    form[e.target.name] = e.target.value;\n    this.setState({ form });\n  };\n\n  onFocus = key => {\n    this.setState({\n      focus: {\n        [key]: true\n      }\n    });\n  };\n\n  onBlur = (e, key) => {\n    this.setState({\n      focus: {\n        [key]: e.target.value !== \"\"\n      }\n    });\n  };\n\n  togglePassword = () => {\n    this.setState({\n      passToggle: !this.state.passToggle\n    });\n  };\n\n  render() {\n    const { form, focus, passToggle, isFocused } = this.state;\n    return (\n      <div className=\"sign-in\">\n        <div className=\"sign-in-form\">\n          <div className=\"sign-in-form-container\">\n            <h2>Sign in</h2>\n            <p>\n              Enter your email and password and login in your <br /> account\n            </p>\n            <form>\n              <div className=\"G-field\">\n                <label\n                  className={`G-form-label  ${\n                    focus.email ? \"G-label-animated\" : \"\"\n                  }`}\n                  htmlFor=\"signin-email\"\n                >\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  onFocus={() => this.onFocus(\"email\")}\n                  onBlur={e => this.onBlur(event, \"email\")}\n                />\n\n                <span\n                  className={`input-border ${\n                    focus.email ? \"input-border-animated\" : \"\"\n                  }`}\n                ></span>\n              </div>\n              <div className=\"G-field\">\n                <label\n                  className={`G-form-label  ${\n                    focus.password ? \"G-label-animated\" : \"\"\n                  }`}\n                  htmlFor=\"signin-password\"\n                >\n                  Password\n                </label>\n                <input\n                  type={!passToggle ? \"password\" : \"text\"}\n                  onFocus={() => this.onFocus(\"password\")}\n                  onBlur={() => this.onBlur(event, \"password\")}\n                />\n\n                <span\n                  className={`input-border ${\n                    focus.password ? \"input-border-animated\" : \"\"\n                  }`}\n                ></span>\n                <i\n                  className={!passToggle ? \"icon-ic_eye\" : \"icon-ic_eyeclosed\"}\n                  onClick={this.togglePassword}\n                ></i>\n              </div>\n\n              <button className=\"G-button\" onClick={this.submit}>\n                Sign in\n              </button>\n            </form>\n          </div>\n        </div>\n        <div className=\"logo\">\n          <img src={logo} alt=\"2gather\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SignIn;\n","import Connection from '../services/connection';\r\n\r\nconst controllerName = 'auth';\r\n\r\nclass AuthController {\r\n\r\n  static Login = body => {\r\n    const result = Connection.POST(controllerName, 'login', body);\r\n    return result;\r\n  }\r\n\r\n  static Register = body => {\r\n    const result = Connection.POST(controllerName, 'register', body);\r\n    return result;\r\n  }\r\n\r\n  static Email = query => {\r\n    const result = Connection.POST(controllerName, 'email', query);\r\n    return result;\r\n  }\r\n\r\n  static RestoreEmail = query => {\r\n    const result = Connection.POST(controllerName, 'restore/email', query);\r\n    return result;\r\n  }\r\n\r\n  static Restore = query => {\r\n    const result = Connection.POST(controllerName, 'restore', query);\r\n    return result;\r\n  }\r\n\r\n  static SocialLogin = query => {\r\n    const result = Connection.POST(controllerName, 'socialLogin', query);\r\n    return result;\r\n  }\r\n\r\n \r\n\r\n  // static EmailVerify = query => {\r\n  //   const result = Connection.POST(controllerName, 'check', query);\r\n  //   return result;\r\n  // }\r\n\r\n  // static Logout = () => {\r\n  //   const result = Connection.GET(controllerName, 'Logout');\r\n  //   return result;\r\n  // }\r\n\r\n  // static PasswordRecovery = query => {\r\n  //   const result = Connection.GET(controllerName, 'PasswordRecoverySend', query);\r\n  //   return result;\r\n  // }\r\n\r\n  // static PasswordRecoveryConfirm = body => {\r\n  //   const result = Connection.POST(controllerName, 'PasswordRecoveryConfirm', body);\r\n  //   return result;\r\n  // }\r\n}\r\n\r\nexport default AuthController;","import * as nodeFetch from \"node-fetch\";\r\nimport ROUTES from \"../constants/routes\";\r\n\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { LanguageEnum } from \"../constants/enums\";\r\n\r\nclass Connection {\r\n  static BASE_URL = \"https://2.evollai.com/api\";\r\n\r\n  static queryFromObject = obj => {\r\n    const str = [];\r\n\r\n    for (const query in obj) {\r\n      if (obj.hasOwnProperty(query) && obj[query]) {\r\n        const string =\r\n          encodeURIComponent(query) + \"=\" + encodeURIComponent(obj[query]);\r\n        str.push(string);\r\n      }\r\n    }\r\n\r\n    return str.join(\"&\");\r\n  };\r\n\r\n  static createHeaders = isUpload => {\r\n    let language = 1;\r\n    const HEADERS = new Headers();\r\n    const shortLanguage = localStorage.getItem(\"language\");\r\n    if (shortLanguage === \"hy\") language = LanguageEnum.hy;\r\n    else if (shortLanguage === \"ru\") language = LanguageEnum.ru;\r\n    else if (shortLanguage === \"en\") language = LanguageEnum.en;\r\n    !isUpload && HEADERS.append(\"Content-Type\", \"application/json\");\r\n    HEADERS.append(\"language\", language);\r\n    return HEADERS;\r\n  };\r\n\r\n  static responseRestructure = response => {\r\n    if (response.status === 401 || response.status === 403) {\r\n      window.routerHistory.push(ROUTES.HOME);\r\n      NotificationManager.error(\r\n        \"Something is wrong with permission or authentication\"\r\n      );\r\n    }\r\n\r\n    return response.ok ? response.json() : {};\r\n  };\r\n\r\n  static stringifyUrlEncoded = obj => {\r\n    let urlEncoded = \"\";\r\n    for (let key in obj) {\r\n      urlEncoded += `${encodeURIComponent(key)}=${encodeURIComponent(\r\n        obj[key]\r\n      )}&`;\r\n    }\r\n    return urlEncoded;\r\n  };\r\n\r\n  static POST = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body: JSON.stringify(body),\r\n        method: \"POST\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static PUT = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body: JSON.stringify(body),\r\n        method: \"PUT\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static DELETE = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        method: \"DELETE\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static GET = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        method: \"GET\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static UPLOAD = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders(true);\r\n    window.pendingRequest = true;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/api/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body,\r\n        method: \"POST\",\r\n        headers: HEADERS\r\n      }\r\n    );\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  };\r\n\r\n  static Custom = async ({ url, method, body, queryConfig }) => {\r\n    const response = await nodeFetch(\r\n      `${url}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body,\r\n        method\r\n      }\r\n    );\r\n\r\n    return response.ok ? response.json() : {};\r\n  };\r\n\r\n  static ServerRequest = async ({\r\n    method,\r\n    controllerName,\r\n    actionName,\r\n    body,\r\n    queryConfig\r\n  }) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const response = await fetch(\r\n      `${Connection.BASE_URL}/api/${controllerName}${\r\n        !onlyQuery ? \"/\" : \"\"\r\n      }${actionName}${\r\n        queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : \"\"\r\n      }`,\r\n      {\r\n        body,\r\n        method\r\n      }\r\n    );\r\n\r\n    return response.ok ? response.json() : {};\r\n  };\r\n}\r\n\r\nexport default Connection;\r\n","export const isValidEmail = value => {\r\n  if (!value && value !== '') return false;\r\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return regex.test(value);\r\n};\r\n\r\n\r\nexport const isValidPassword = value => {\r\n  if(!value && value !== \"\") return false;\r\n  const regex = /^.{6,}$/;\r\n  return regex.test(value);\r\n}\r\n\r\nexport const isValidPhoneNum = value => {\r\n  if(!value && value !== \"\") return false;\r\n  const regex = /\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/;\r\n  return regex.test(value);\r\n}","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"node-fetch\");","module.exports = require(\"react-notifications\");"],"mappings":"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","sourceRoot":""}