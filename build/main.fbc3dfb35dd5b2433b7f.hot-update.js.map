{"version":3,"file":"main.fbc3dfb35dd5b2433b7f.hot-update.js","sources":["webpack:///./src/pages/SignIn/index.jsx","webpack:///./src/platform/api/auth.js","webpack:///./src/platform/services/connection.js","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"node-fetch\"","webpack:///external \"react-notifications\""],"sourcesContent":["import React from 'react';\nimport logo from '../../assets/images/2gather.jpg';\nimport AuthController from '../../platform/api/auth';\nimport './style.scss';\n\n\nclass SignIn extends React.Component {\n\n    state = {\n        password: false,\n    }\n\n    togglePassword = () => {\n        this.setState({\n            password: !this.state.password,\n        })\n    }\n\n    handleSignIn = async () => {\n        const res = await AuthController.Login();\n        console.log(res)\n    }\n\n    render(){\n        const { password } = this.state;\n        return (\n            <div className=\"sign-in\">\n                <div className=\"sign-in-form\">\n                    <div className=\"sign-in-form-container\">\n                        <h2>Sign in</h2>\n                        <p>Enter your email and password and login in your <br/> account</p>\n                        <form>\n                            <div className=\"G-field\">\n                                <label>\n                                    <input type=\"text\"/>\n                                </label>\n                                <span className=\"input-border\"></span>\n                            </div>\n                            <div className=\"G-field\">\n                                <label>\n                                    <input type={!password ? \"password\" : \"text\"}/>\n                                </label>\n                                <i className={!password ? \"icon-ic_eye\" : \"icon-ic_eyeclosed\"} \n                                onClick={this.togglePassword}></i>\n                            </div>\n            \n                            <button className=\"G-button\" onClick={this.handleSignIn}>\n                                Sign in\n                            </button>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"logo\">\n                    <img src={logo} alt=\"2gather\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SignIn;","import Connection from '../services/connection';\r\n\r\nconst controllerName = 'api';\r\n\r\nclass AuthController {\r\n\r\n  static Login = body => {\r\n    const result = Connection.POST(controllerName, 'login', body);\r\n    return result;\r\n  }\r\n\r\n  static Register = body => {\r\n    const result = Connection.POST(controllerName, 'register', body);\r\n    return result;\r\n  }\r\n\r\n  static Email = query => {\r\n    const result = Connection.POST(controllerName, 'email', query);\r\n    return result;\r\n  }\r\n\r\n  static RestoreEmail = query => {\r\n    const result = Connection.POST(controllerName, 'restore/email', query);\r\n    return result;\r\n  }\r\n\r\n  static Restore = query => {\r\n    const result = Connection.POST(controllerName, 'restore', query);\r\n    return result;\r\n  }\r\n\r\n  static SocialLogin = query => {\r\n    const result = Connection.POST(controllerName, 'socialLogin', query);\r\n    return result;\r\n  }\r\n\r\n \r\n\r\n  // static EmailVerify = query => {\r\n  //   const result = Connection.POST(controllerName, 'check', query);\r\n  //   return result;\r\n  // }\r\n\r\n  // static Logout = () => {\r\n  //   const result = Connection.GET(controllerName, 'Logout');\r\n  //   return result;\r\n  // }\r\n\r\n  // static PasswordRecovery = query => {\r\n  //   const result = Connection.GET(controllerName, 'PasswordRecoverySend', query);\r\n  //   return result;\r\n  // }\r\n\r\n  // static PasswordRecoveryConfirm = body => {\r\n  //   const result = Connection.POST(controllerName, 'PasswordRecoveryConfirm', body);\r\n  //   return result;\r\n  // }\r\n}\r\n\r\nexport default AuthController;","import * as nodeFetch from 'node-fetch';\r\nimport ROUTES from '../constants/routes';\r\n\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { LanguageEnum } from '../constants/enums';\r\n\r\nclass Connection {\r\n\r\n  static BASE_URL = 'https://2.evollai.com/api';\r\n  \r\n\r\n  static queryFromObject = obj => {\r\n    const str = [];\r\n\r\n    for (const query in obj) {\r\n      if (obj.hasOwnProperty(query) && obj[query]) {\r\n        const string = encodeURIComponent(query) + \"=\" + encodeURIComponent(obj[query]);\r\n        str.push(string);\r\n      }\r\n    }\r\n  \r\n    return str.join(\"&\");\r\n  }\r\n\r\n  static createHeaders = isUpload => {\r\n    let language = 1;\r\n    const HEADERS = new Headers();\r\n    const shortLanguage = localStorage.getItem('language');\r\n    if (shortLanguage === 'hy') language = LanguageEnum.hy;\r\n    else if (shortLanguage === 'ru') language = LanguageEnum.ru;\r\n    else if (shortLanguage === 'en') language = LanguageEnum.en;\r\n    !isUpload && HEADERS.append('Content-Type', 'application/json');\r\n    HEADERS.append('language', language);\r\n    return HEADERS;\r\n  }\r\n\r\n  static responseRestructure = response => {\r\n    if (response.status === 401 || response.status === 403) {\r\n      window.routerHistory.push(ROUTES.HOME);\r\n      NotificationManager.error('Something is wrong with permission or authentication');\r\n    };\r\n\r\n    return response.ok ? response.json() : {};\r\n  }\r\n\r\n  static stringifyUrlEncoded = obj => {\r\n    let urlEncoded = '';\r\n    for (let key in obj) {\r\n      urlEncoded += `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}&`;\r\n    }\r\n    return urlEncoded;\r\n  }\r\n\r\n  static POST = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body: JSON.stringify(body),\r\n      method: 'POST',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static PUT = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body: JSON.stringify(body),\r\n      method: 'PUT',\r\n      headers: HEADERS,\r\n    })\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static DELETE = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      method: 'DELETE',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static GET = async (controllerName, actionName, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders();\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      method: 'GET',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static UPLOAD = async (controllerName, actionName, body, queryConfig) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const HEADERS = Connection.createHeaders(true);\r\n    window.pendingRequest = true;\r\n    const response = await fetch(`${Connection.BASE_URL}/api/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body,\r\n      method: 'POST',\r\n      headers: HEADERS,\r\n    });\r\n\r\n    window.pendingRequest = false;\r\n    return Connection.responseRestructure(response);\r\n  }\r\n\r\n  static Custom = async ({ url, method, body, queryConfig }) => {\r\n    const response = await nodeFetch(`${url}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body,\r\n      method,\r\n    });\r\n\r\n    return response.ok ? response.json() : {};\r\n  }\r\n\r\n  static ServerRequest = async ({ method, controllerName, actionName, body, queryConfig }) => {\r\n    const onlyQuery = !actionName && queryConfig;\r\n    const response = await fetch(`${Connection.BASE_URL}/api/${controllerName}${!onlyQuery ? '/' : ''}${actionName}${queryConfig ? `?${Connection.queryFromObject(queryConfig)}` : ''}`, {\r\n      body,\r\n      method,\r\n    });\r\n\r\n    return response.ok ? response.json() : {};\r\n  }\r\n}\r\n\r\nexport default Connection;","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"node-fetch\");","module.exports = require(\"react-notifications\");"],"mappings":"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","sourceRoot":""}